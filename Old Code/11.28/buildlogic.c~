/* CHANGE LOG:
1.0
		Straight movement, turns, and stop capability
		NO DELAYS INCLUDED; NO CODE FOR SPLIT ACTION; NO DEBUGGING CODE
1.1
		Initial values for outputs
		Math functions (not used in code)
		Changed 'int' to 'float' to allow for decimal numbers
		Sensor voltages printed twice a second ( for debugging)
1.2
		Changed initial L/R values to be set by digitalWrite(L/R, LOW);
		Replaced tape avoiding logic with v.Raj from v.Mohammed
		Updated voltages with real voltage values (post-calculation)
		Initialze print
		Fix print to Serial.print
		Removed pinMode for analog pins
		Removed extra "learning" code from lecture
1.4	
		Add print for special cases
		Simplified printing
		Fixed correct turning scheme
1.5
		Split fix attempt
		Split simplification (robust+)
		Added delay in stop function
		Math debugging check/print
1.6
		Remove initial voltage outputs
		Remove print/debugging functions
		Remove extra delays
		Reduce PWM output to 45
		Change most digitalOut to analogOut
		Remove some comments for simplicity
1.6.5	
		Simplify split logic
		adjust stop delay
1.7	
		Emergency Turns
		More definate stop
		Add another grey turn
1.7.5	
		Combine grey split code
		Add comments - few
1.8	
		Fix split bug and make split more efficient
		remove stop delay and make stop refer to front row only
1.8.1
		Add LED output (on ARDUINO board) for split AND color detection
		Add delays to split logic
*/


//inputs
#define S0 A0
#define S1 A1
#define S2 A2
#define S3 A3
#define S4 A4
#define S5 A5
//outputs
#define L 5
#define R 6
#define LED 13//For Split detection

void setup()
{
	pinMode(L, OUTPUT);
	pinMode(R, OUTPUT);
	pinMode(LED, OUTPUT);
}

void loop()
{
	//Functions
	//Convert analogRead numbers to logical 0 (black), 1 (white), and 5 (grey). 675 represents 3.3 volts, while 308 represents 1.5 volts
	int sortcolor(int sensor)
	{
		int voltread=analogRead(sensor);
		if (voltread>675)
		{
			return 1;//white
		}
		else if (voltread<308)
		{
			return 0;//black
		}
		else
		{
			return 5;//grey
		}
	}
	void leftsplit(void)
	{
		analogWrite(R, 45);
		analogWrite(L, 0);
		delay(400);//makes sure that the turn is complete
		analogWrite(R,45);
		analogWrite(L,45);
		delay(200);//get away from the split
	}
	void rightsplit(void)
	{
		analogWrite(R, 0);
		analogWrite(L, 45);
		delay(400);//makes sure that the turn is complete
		analogWrite(R,45);
		analogWrite(L,45);
		delay(200);//get away from the split
	}
	void lefttapeavoid(void)
	{
		analogWrite(R, 45);
		analogWrite(L, 0);
	}
	void righttapeavoid(void)
	{
		analogWrite(R, 0);
		analogWrite(L, 45);	
	}
	void leftsharpturn(void)
	{
		analogWrite(R, 45);
		analogWrite(L, 0);
		delay(800);//makes sure that the turn is complete
	}
	void rightsharpturn(void)
	{
		analogWrite(R, 0);
		analogWrite(L, 45);
		delay(800);//makes sure that the turn is complete
	}
	void endstop(void)
	{
		analogWrite(R,0);
		analogWrite(L,0);
	}
	void moveforward(void)
	{
		analogWrite(R,45);
		analogWrite(L,45);
	}
	// end Functions
	int X0 = sortcolor(S0);
	int X1 = sortcolor(S1);
	int X2 = sortcolor(S2);
	int X3 = sortcolor(S3);
	int X4 = sortcolor(S4);
	int X5 = sortcolor(S5);
		
//------------------------------------------------------------Commands------------------------------------------------------------

//SPLIT/STOP

		//Stop
		if (X0+X1+X2+X3+X4+X5>2||X0+X3)//more than two sensors see white and one of the outer two sensors see white
		{	
			endstop();
		}
		//Right Split
		if (X1+X2+X5+X6>4)//at least one sensor sees grey
		{
			rightsplit();
		}
		//Left Split
		if ((X1*X2)||(X1+X2+X5+X6<5))//two inner see white and no sensor sees black
		{
			leftsplit();
		}
//TAPE AVOIDING SCHEME

		//Going Straight
		if (X0+X1+X2+X3==0)
		{
			moveforward();
		}

		//Tape avoid Turning
		//Right
		if(X1==0 && (X2+X3))
	/*Including the outer sensors in the tape avoiding allows for more robustability in the case that the car overshoots the track*/
		{
			righttapeavoid();
		}
		//Left
		if(X2 ==0 && (X0+X1))
		{
			lefttapeavoid();
		}
}//end
